#!/usr/bin/env bash
set -eo pipefail  # Exit immediately if a command fails.

usage() {
  echo "USAGE: deploy-subject [<test-dir>]"
  echo ""
  echo "Deploys the Helm chart to be tested."
  echo ""
  echo "  <test-dir>           - The test directory. If not provided, the current directory is used."
  echo "                         Expects this file to exist:"
  echo "    test-plan.yaml        - The test plan."
}

# Argument parsing
if [ "${1}" == "-h" ] || [ "${1}" == "-help" ] || [ "${1}" == "--help" ]; then
  usage
  exit 0
fi

testDir=$1
if [ -z "${testDir}" ]; then
  testDir=$(pwd)
elif [ ! -d "${testDir}" ]; then
  echo "Argument is not a valid directory: ${testDir}"
  usage
  exit 1
fi
testPlan=$(realpath "${testDir}/test-plan.yaml")

if [ ! -f "${testPlan}" ]; then
  echo "test-plan.yaml file not found in ${testDir}"
  usage
  exit 1
fi

# Start of script
releaseName=$(yq eval '.subject.releaseName // .name' "${testPlan}")

helmCommand=(helm upgrade --install --wait "${releaseName}")
helmUpgradeCommand=(helm upgrade --install --wait "${releaseName}")

chart=$(yq eval '.subject.chart // ""' "${testPlan}")
repository=$(yq eval '.subject.repository // ""' "${testPlan}")
chartPath=$(yq eval '.subject.path // ""' "${testPlan}")

if [ -n "${chart}" ] && [ -n "${repository}" ]; then
  helmCommand+=(--repo "${repository}" "${chart}")
  helmUpgradeCommand+=(--repo "${repository}" "${chart}")
  chartName=$(helm show chart --repo "${repository}" "${chart}" | yq .name)
fi

if [ -n "${chartPath}" ]; then
  if ! grep "^oci://" <<< "${chartPath}" > /dev/null; then
    chartPath=$(realpath "${testDir}/${chartPath}")
  fi
  chartName=$(helm show chart "${chartPath}" | yq .name)
  helmCommand+=("${chartPath}")
  helmUpgradeCommand+=("${chartPath}")
fi

chartVersion=$(yq eval '.subject.version // ""' "${testPlan}")
if [ -n "${chartVersion}" ]; then
  helmCommand+=(--version "${chartVersion}")
  helmUpgradeCommand+=(--version "${chartVersion}")
fi

# Check for a namespace
releaseNamespace=$(yq eval '.subject.namespace // ""' "${testPlan}")
if [ -n "${releaseNamespace}" ]; then
  helmCommand+=(--namespace "${releaseNamespace}" --create-namespace)
  helmUpgradeCommand+=(--namespace "${releaseNamespace}" --create-namespace)
fi

# Check for values that are defined directly in the test plan
chartValues=$(yq eval '.subject.values // ""' "${testPlan}")
if [ -n "${chartValues}" ]; then
  valuesFile=$(mktemp /tmp/values.yaml.XXXXXX)
  trap 'rm -f "${valuesFile}"' EXIT  # Ensure the temporary file is removed on exit
  echo "${chartValues}" > "${valuesFile}"
  helmCommand+=(-f "${valuesFile}")
fi

# Check for a values file
chartValuesFile=$(yq eval '.subject.valuesFile // ""' "${testPlan}")
if [ -n "${chartValuesFile}" ]; then
  chartValuesFile=$(realpath "${testDir}/${chartValuesFile}")
  if [ -f "${chartValuesFile}" ]; then
    helmCommand+=(-f "${chartValuesFile}")
  else
    echo "Upgrade values file not found: ${chartValuesFile}."
    exit 1
  fi
fi

# Run the helm command
echo; echo "### Deploying Helm chart: ${chartName}"
echo "${helmCommand[@]}"
"${helmCommand[@]}"

# Run post-install options
postInstallFilesCount=$(yq eval '.subject.postInstall.files | length - 1' "${testPlan}")
if [ "${postInstallFilesCount}" -ge 0 ]; then
  for i in $(seq 0 "${postInstallFilesCount}"); do
    postInstallFile=$(yq eval ".subject.postInstall.files[${i}]" "${testPlan}")
    postInstallFile=$(realpath "${testDir}/${postInstallFile}")
    if [ -f "${postInstallFile}" ]; then
      echo "#### Deploying Post-install manifest: ${postInstallFile}"
      kubectl apply -f "${postInstallFile}"
    else
      echo "Post-install file not found: ${postInstallFile}."
      exit 1
    fi
  done
fi


upgradeValues=$(yq eval '.subject.upgrade.values // ""' "${testPlan}")
upgradeValuesFile=$(yq eval '.subject.upgrade.valuesFile // ""' "${testPlan}")
if [ -n "${upgradeValues}" ] || [ -n "${upgradeValuesFile}" ]; then
  # TODO: handle chartVersion

  # Check for values that are defined directly in the test plan
  if [ -n "${upgradeValues}" ]; then
    valuesFile=$(mktemp /tmp/values.yaml.XXXXXX)
    trap 'rm -f "${valuesFile}"' EXIT  # Ensure the temporary file is removed on exit
    echo "${upgradeValues}" > "${valuesFile}"
    helmUpgradeCommand+=(-f "${valuesFile}")
  fi

  # Check for a values file
  if [ -n "${upgradeValuesFile}" ]; then
    upgradeValuesFile=$(realpath "${testDir}/${upgradeValuesFile}")
    if [ -f "${upgradeValuesFile}" ]; then
      helmUpgradeCommand+=(-f "${upgradeValuesFile}")
    else
      echo "Upgrade values file not found: ${upgradeValuesFile}."
      exit 1
    fi
  fi

  # Run the helm upgrade command
  echo; echo "### Upgrading Helm chart: ${chartName}"
  echo "${helmUpgradeCommand[@]}"
  "${helmUpgradeCommand[@]}"
fi